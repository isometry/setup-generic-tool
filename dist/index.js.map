{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as os from 'os';\nimport { Octokit } from '@octokit/rest';\n\nconst github = new Octokit();\n\nif (require.main === module) {\n    main().catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n}\n\nasync function main(): Promise<void> {\n    try {\n        const inputs = {\n            name: core.getInput('name'),\n            tool: core.getInput('tool'),\n            version: core.getInput('version') || 'latest',\n        };\n\n        if (!inputs.name) {\n            throw new Error('Missing required input: name');\n        }\n\n        const [owner, repo] = inputs.name.split('/', 2);\n        if (!owner || !repo) {\n            throw new Error('Invalid repository name');\n        }\n\n        const tool = inputs.tool || repo;\n\n        if (!/^[-A-Za-z0-9]+$/.test(tool)) {\n            throw new Error('Invalid tool name');\n        }\n\n        let release;\n        let version = inputs.version;\n\n        if (version === 'latest') {\n            release = await github.repos.getLatestRelease({\n                owner: owner,\n                repo: repo,\n            });\n            version = release.data.tag_name;\n            core.info(`Resolved latest version: ${version}`);\n        } else {\n            release = await github.repos.getReleaseByTag({\n                owner: owner,\n                repo: repo,\n                tag: version,\n            });\n        }\n\n        let toolPath = tc.find(tool, version);\n\n        if (!toolPath) {\n            const platform = os.platform();\n            let arch = os.arch();\n            switch (arch) {\n                case 'arm':\n                    arch = '(arm|arm32)';\n                    break;\n                case 'arm64':\n                    arch = '(aarch64|arm64)';\n                    break;\n                case 'ia32':\n                    arch = '(x32|x86)';\n                    break;\n                case 'x64':\n                    arch = '(amd64|x64|x86_64)';\n                    break;\n                default:\n                    break;\n            }\n\n            const assetRegex = new RegExp(`^${tool}.+${platform}.+${arch}([.](zip|tar[.]gz))?$`, 'i');\n            let matchingAssets = release.data.assets.filter(\n                asset => assetRegex.test(asset.name)\n            );\n\n            if (matchingAssets.length !== 1) {\n                core.info(`All release assets: [${release.data.assets.map(asset => asset.name).join(', ')}]`);\n                throw new Error(`Expected exactly one matching asset, but found ${matchingAssets.length}`);\n            }\n\n            const asset = matchingAssets[0];\n            let archive = '';\n            const archiveMatch = asset.name.match(/\\.(zip|tar\\.gz)$/);\n            if (archiveMatch) {\n                archive = archiveMatch[1];\n            }\n\n            core.info(`Found release asset: '${asset.browser_download_url}'`);\n            const toolUrl = asset.browser_download_url;\n\n            core.info(`Downloading ${tool} from ${toolUrl}`);\n            const toolArchive = await tc.downloadTool(toolUrl);\n            let extractPath = toolArchive;\n            switch (archive) {\n                case '':\n                    break;\n                case 'zip':\n                    core.info(`Extracting zip archive: ${toolArchive}`);\n                    extractPath = await tc.extractZip(toolArchive);\n                    break;\n                case 'tar.gz':\n                    core.info(`Extracting tar.gz archive: ${toolArchive}`);\n                    extractPath = await tc.extractTar(toolArchive, '', ['xz', '--strip-components=1']);\n                    break;\n                default:\n                    throw new Error(`Unsupported archive format: ${archive}`);\n            }\n\n            toolPath = await tc.cacheFile(`${extractPath} / ${tool}`, tool, tool, version);\n        }\n\n        core.addPath(toolPath);\n        core.setOutput('version', version);\n        core.info(`Installed ${tool} version ${version}`);\n    } catch (err) {\n        core.setFailed(`Action failed with error ${err} `);\n    }\n}\n"]}