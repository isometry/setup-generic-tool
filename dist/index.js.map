{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as os from 'os';\nimport { Octokit } from '@octokit/rest';\n\nconst github = new Octokit();\n\nif (require.main === module) {\n    main().catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n}\n\nasync function main(): Promise<void> {\n    try {\n        const inputs = {\n            name: core.getInput('name'),\n            version: core.getInput('version'),\n            owner: core.getInput('owner'),\n            repo: core.getInput('repo'),\n        };\n\n        if (!inputs.name) {\n            throw new Error('Missing required input: name');\n        }\n\n        if (!inputs.version) {\n            core.info('version not provided, using latest');\n            inputs.version = 'latest';\n        }\n\n        if (!inputs.owner) {\n            throw new Error('Missing required input: owner');\n        }\n\n        if (!inputs.repo) {\n            core.info('repo not provided, using name as repo');\n            inputs.repo = inputs.name;\n        }\n\n        let release;\n        let version = inputs.version;\n\n        if (version === 'latest') {\n            release = await github.repos.getLatestRelease({\n                owner: inputs.owner,\n                repo: inputs.repo,\n            });\n            version = release.data.tag_name;\n            core.info(`Resolved latest version: ${version}`);\n        } else {\n            release = await github.repos.getReleaseByTag({\n                owner: inputs.owner,\n                repo: inputs.repo,\n                tag: inputs.version,\n            });\n        }\n\n        let toolPath = tc.find(inputs.name, version);\n\n        if (!toolPath) {\n            const platform = os.platform();\n            let arch = os.arch();\n            if (arch === 'x64') {\n                arch = 'amd64';\n            }\n\n            const assetRegex = new RegExp(`^${inputs.name}.+${platform}.+${arch}([.](zip|tar[.]gz))?$`, 'i');\n            let matchingAssets = release.data.assets.filter(\n                asset => assetRegex.test(asset.name)\n            );\n\n            if (matchingAssets.length !== 1) {\n                core.info(`All release assets: [${release.data.assets.map(asset => asset.name).join(', ')}]`);\n                throw new Error(`Expected exactly one matching asset, but found ${matchingAssets.length}`);\n            }\n\n            const asset = matchingAssets[0];\n            let archive = '';\n            const archiveMatch = asset.name.match(/\\.(zip|tar\\.gz)$/);\n            if (archiveMatch) {\n                archive = archiveMatch[1];\n            }\n\n            core.info(`Found release asset: '${asset.browser_download_url}'`);\n            const toolUrl = asset.browser_download_url;\n\n            core.info(`Downloading ${inputs.name} from ${toolUrl}`);\n            const toolArchive = await tc.downloadTool(toolUrl);\n            let extractPath = toolArchive;\n            if (archive === 'zip') {\n                core.info(`Extracting zip archive: ${toolArchive}`);\n                extractPath = await tc.extractZip(toolArchive);\n            } else if (archive === 'tar.gz') {\n                core.info(`Extracting tar.gz archive: ${toolArchive}`);\n                extractPath = await tc.extractTar(toolArchive, '', ['xz', '--strip-components=1']);\n            } else if (archive !== '') {\n                throw new Error(`Unsupported archive format: ${archive}`);\n            }\n\n            toolPath = await tc.cacheFile(`${extractPath} / ${inputs.name}`, inputs.name, inputs.name, version);\n        }\n\n        core.addPath(toolPath);\n        core.setOutput('version', version);\n        core.info(`Installed ${inputs.name} version ${version}`);\n    } catch (err) {\n        core.setFailed(`Action failed with error ${err} `);\n    }\n}\n"]}