{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\nimport * as core from '@actions/core';\nimport * as tc from '@actions/tool-cache';\nimport * as os from 'os';\nimport { Octokit } from '@octokit/rest';\n\nconst github = new Octokit();\n\nif (require.main === module) {\n    main().catch(err => {\n        console.error(err.stack);\n        process.exit(1);\n    });\n}\n\nasync function main(): Promise<void> {\n    try {\n        const inputs = {\n            name: core.getInput('name'),\n            version: core.getInput('version'),\n            owner: core.getInput('owner'),\n            repo: core.getInput('repo'),\n            archive: core.getInput('archive'),\n        };\n\n        if (!inputs.name) {\n            throw new Error('Missing required input: name');\n        }\n\n        if (!inputs.version) {\n            core.info('version not provided, using latest');\n            inputs.version = 'latest';\n        }\n\n        if (!inputs.owner) {\n            throw new Error('Missing required input: owner');\n        }\n\n        if (!inputs.repo) {\n            core.info('repo not provided, using name as repo');\n            inputs.repo = inputs.name;\n        }\n\n        let archive = inputs.archive;\n        if (archive) {\n            archive = archive.toLowerCase();\n            if (!archive.startsWith('.')) {\n                archive = '.' + archive;\n            }\n            core.info(`Using archive suffix: '${archive}'`);\n        }\n\n        const version = (inputs.version === 'latest')\n            ? await github.repos.getLatestRelease({\n                owner: inputs.owner,\n                repo: inputs.repo,\n            }).then(res => res.data.tag_name)\n            : inputs.version;\n\n        let toolPath = tc.find(inputs.name, version);\n\n        if (!toolPath) {\n            const platform = os.platform();\n            let arch = os.arch();\n            if (arch === 'x64') {\n                arch = 'amd64';\n            }\n\n            const toolUrl = `https://github.com/${inputs.owner}/${inputs.repo}/releases/download/${version}/${inputs.name}_${version.slice(1)}_${platform}_${arch}${archive}`;\n            core.info(`Downloading ${inputs.name} from ${toolUrl}`);\n            const toolArchive = await tc.downloadTool(toolUrl);\n            let extractPath = toolArchive;\n            if (archive === '') {\n            } else if (archive === '.zip') {\n                core.info(`Extracting zip archive: ${toolArchive}`);\n                extractPath = await tc.extractZip(toolArchive);\n            } else if (archive === '.tar.gz') {\n                core.info(`Extracting tar.gz archive: ${toolArchive}`);\n                extractPath = await tc.extractTar(toolArchive, '', ['xz', '--strip-components=1']);\n            } else if (archive === '.7z') {\n                core.info(`Extracting 7z archive: ${toolArchive}`);\n                extractPath = await tc.extract7z(toolArchive);\n            } else if (archive === '.xar') {\n                core.info(`Extracting xar archive: ${toolArchive}`);\n                extractPath = await tc.extractXar(toolArchive);\n            } else {\n                throw new Error(`Unsupported archive format: ${archive}`);\n            }\n\n            toolPath = await tc.cacheFile(`${extractPath}/${inputs.name}`, inputs.name, inputs.name, version);\n        }\n\n        core.addPath(toolPath);\n        core.setOutput('version', version);\n        core.info(`Installed ${inputs.name} version ${version}`);\n    } catch (err) {\n        core.setFailed(`Action failed with error ${err}`);\n    }\n}\n"]}